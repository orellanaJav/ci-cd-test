name: Test Deleted

on:
  push:
    branches:
      - "crafting"
env:
  DEV_REGION: sa-east-1  
  RELEASE_REGION: us-east-1
  PROD_REGION: us-east-1

jobs:
  track-deleted-files:
    name: Track All Deleted Files
    runs-on: ubuntu-latest
    outputs:
      stacks-to-remove: ${{ steps.set-matrix.outputs.stacks-to-remove }}
      lambdas-to-remove: ${{ steps.set-matrix.outputs.lambdas-to-remove }}
      # matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v2
    - name: Check changed files
      id: diff
      run: |
        git fetch origin ${{ github.event.before }} --depth=1
        export DIFF=$( git diff --diff-filter=D --name-only ${{ github.event.before }} $GITHUB_SHA )
        echo "Diff between ${{ github.event.before }} and $GITHUB_SHA"
        echo "$DIFF"
        echo "::set-output name=diff::$( echo "$DIFF" | sed ':a;N;$!ba;s/\n/%0A/g' )"        
    
    - name: Set matrix for delete stacks
      id: set-matrix
      run: |
        DIFF="${{ steps.diff.outputs.diff }}"
        STACKS="${{ needs.stacks.outputs.listStacks }}"
        COUNT_DELETED_FILES_IN_STACK=0
        COUNT_DELETED_FILES_IN_SERVICE=0          
        
        # Genera el archivo inicial que contendra la cantidad de archivos
        # eliminados por stack y servicios lambda.
        jq -n '[]' > initial_json.json
        json_file=$(jq . initial_json.json)
        INITIAL_DIRECTORY=$(pwd)
        git checkout ${{ github.event.before }}
        
        if [ -z "$DIFF" ]; then
          echo "::set-output name=folders::[]"
        else
          JSON="["
          json_stack="["            
          while read path; do
            # Set $stack to substring before /
            delete_full_stack=false
            stack="$( echo $path | cut -d'/' -f1 -s )"
            services_path="$( echo $path | cut -d'/' -f2 -s )"
            if [[ "$services_path" == *"services"* ]]; then
              lambda="$( echo $path | cut -d'/' -f3 -s )"
            fi
            
            cd "$stack"
            initial_files_in_stack=$(git ls-files | wc -l)
            cd $INITIAL_DIRECTORY
            if [[ "$lambda" ]]; then
              cd "$stack/services/$lambda"
              initial_files_in_lambda_service=$(git ls-files | wc -l)
            fi
            cd $INITIAL_DIRECTORY

            DATA_STACK=$(echo "$json_file" | jq -c '.[] | select(.stack_name == "'$stack'")')
            DATA_LAMBDA=$( echo "$DATA_STACK" | jq -r '.lambdas[] | select(.lambda_name == "'$lambda'")' )

            
            # Se encarga de armar objeto json con todos los archivos eliminados en un stack
            if [[ "$DATA_STACK" ]]; then
                COUNT_DELETED_FILES_STACK=$( echo "$DATA_STACK" | jq -r '.files_deleted_in_stack' )
                COUNT_DELETED_FILES_STACK=$((COUNT_DELETED_FILES_STACK + 1))
                if [[ "$COUNT_DELETED_FILES_STACK" == "$initial_files_in_stack" ]]; then
                    delete_full_stack=true
                    jq '(.[] | select(.stack_name == "'$stack'")).delete_full_stack = true' initial_json.json > tmp_json.json
                    json_file=$(jq . tmp_json.json)
                    echo "$json_file" > initial_json.json
                fi
                jq --arg new_key "$COUNT_DELETED_FILES_STACK" '(.[] | select(.stack_name == "'$stack'")).files_deleted_in_stack |= $new_key' initial_json.json > tmp_json.json
                json_file=$(jq . tmp_json.json)
                echo "$json_file" > initial_json.json
            else
                jq '.[. | length] |= . + {"stack_name": "'$stack'", "files_deleted_in_stack": "1", "initial_files_in_stack": '$initial_files_in_stack', "delete_full_stack": false, "lambdas": []}' initial_json.json > tmp_json.json
                json_file=$(jq . tmp_json.json)
                echo "$json_file" > initial_json.json
            fi


            
            # Se encarga de armar un objeto json con todos los archivos eliminados en un 
            # service lambda.
            if [[ "$DATA_LAMBDA" ]]; then
                COUNT_DELETED_FILES_LAMBDA=$( echo "$DATA_LAMBDA" | jq -r '.files_deleted' )
                COUNT_DELETED_FILES_LAMBDA=$((COUNT_DELETED_FILES_LAMBDA + 1))
                
                arr_lambdas=$(jq '(.[] | select(.stack_name == "'$stack'")).lambdas' initial_json.json)                  

                values_lambda=$(jq -c --arg new_key "$COUNT_DELETED_FILES_LAMBDA" '(.[] | select(.stack_name == "'$stack'")).lambdas[] | select(.lambda_name == "'$lambda'").files_deleted |= $new_key' initial_json.json)
                arr_lambdas="["
                while read lambda_; do
                    if [[ ($COUNT_DELETED_FILES_LAMBDA == $initial_files_in_lambda_service) && ($delete_full_stack == false) ]]; then
                        lambda_=$( echo "$lambda_" | jq -c 'select(.lambda_name == "'$lambda'").delete_full_lambda=true' )
                    fi
                    arr_lambdas="$arr_lambdas$lambda_,"
                done <<< "$values_lambda"
                
                if [[ $arr_lambdas == *, ]]; then
                    arr_lambdas="${arr_lambdas::-1}"
                fi
                arr_lambdas="$arr_lambdas]"
                jq --argjson new_key $arr_lambdas '(.[] | select(.stack_name == "'$stack'")).lambdas |= $new_key' initial_json.json > tmp_json.json
                json_file=$(jq . tmp_json.json)
                echo "$json_file" > initial_json.json

            elif [[ "$lambda" ]]; then
                arr_lambdas='[{"lambda_name":"'$lambda'","files_deleted":"1","delete_full_lambda":false,"initial_files_in_lambda_service":'$initial_files_in_lambda_service',"stack_name":"'$stack'"}'
                values_lambda=$(jq -c '(.[] | select(.stack_name == "'$stack'")).lambdas[]' initial_json.json)        
                while read lambda; do
                    arr_lambdas="$arr_lambdas,$lambda"
                done <<< "$values_lambda"

                if [[ $arr_lambdas == *, ]]; then        
                    arr_lambdas=$( echo "${arr_lambdas::-1}" )
                fi
                arr_lambdas="$arr_lambdas]"
                jq --argjson new_key $arr_lambdas '(.[] | select(.stack_name == "'$stack'")).lambdas |= $new_key' initial_json.json > tmp_json.json
                json_file=$(jq -c . tmp_json.json)    
                echo "$json_file" > initial_json.json
            fi

          done <<< "$DIFF"
          
        fi
        json_file=$(jq -c . initial_json.json)
        arr_stored_lambdas="["
        stored_lambda_values=$(jq -c '(.[] | select(.delete_full_stack == false)).lambdas[] | select(.delete_full_lambda == true)' initial_json.json)
        while read stored_lambda; do    
            arr_stored_lambdas="$arr_stored_lambdas$stored_lambda,"
        done <<< "$stored_lambda_values"
        if [[ $arr_stored_lambdas == *, ]]; then        
            arr_stored_lambdas=$( echo "${arr_stored_lambdas::-1}" )
        fi
        arr_stored_lambdas="$arr_stored_lambdas]"
        echo "::set-output name=stacks-to-remove::$( echo "$json_file" )"        
        echo "::set-output name=lambdas-to-remove::$( echo "$arr_stored_lambdas" )"        

  get-stage-and-region:
    name: Get Stage And Region by Branch
    runs-on: ubuntu-latest
    outputs:
      region: ${{ steps.stage-and-region.outputs.region }}
      stage: ${{ steps.stage-and-region.outputs.stage }}
    steps:
      - name: Get Current Branch
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_current_branch

      - name: Set Region For Dev
        run: |
          echo "STAGE=dev" >> $GITHUB_ENV
          echo "REGION=$DEV_REGION" >> $GITHUB_ENV
        if: ${{ steps.extract_current_branch.outputs.branch == 'dev' }}

      - name: Set Region For Crafting
        run: |
          echo "STAGE=dev" >> $GITHUB_ENV
          echo "REGION=$DEV_REGION" >> $GITHUB_ENV
        if: ${{ steps.extract_current_branch.outputs.branch == 'crafting' }}

      - name: Set Region For Release
        run: |
          eecho "STAGE=release" >> $GITHUB_ENV
          echo "REGION=$RELEASE_REGION" >> $GITHUB_ENV
        if: ${{ steps.extract_current_branch.outputs.branch == 'release' }}

      - name: Set Region For Production
        run: |
          echo "STAGE=prod" >> $GITHUB_ENV
          echo "REGION=$PROD_REGION" >> $GITHUB_ENV
        if: ${{ steps.extract_current_branch.outputs.branch == 'main' }}

      - name: Get Stage And Region
        id: stage-and-region
        run: |
          STAGE="${{ env.STAGE }}"
          REGION="${{ env.REGION }}"
          echo "::set-output name=stage::$( echo "$STAGE" )"
          echo "::set-output name=region::$( echo "$REGION" )"

  delete-stack:
    name: Delete Full Stack
    needs: [track-deleted-files, get-stage-and-region]
    if: ${{ needs.track-deleted-files.outputs.stacks-to-remove != '[]' && needs.track-deleted-files.outputs.stacks-to-remove != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        stacks: 
          - ${{fromJson(needs.track-deleted-files.outputs.stacks-to-remove)}}
    steps:
      - uses: actions/checkout@v2
        if: ${{ matrix.stacks.delete_full_stack == true }}
      - name: Fetch Event Before
        if: ${{ matrix.stacks.delete_full_stack == true }}
        run: |
          git fetch origin ${{ github.event.before }} --depth=1          
      - name: Cache node_modules
        if: ${{ matrix.stacks.delete_full_stack == true }}
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-
      - name: Configure AWS Credentials
        if: ${{ matrix.stacks.delete_full_stack == true }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Install Dependencies
        run: |
          pwd
          ls -la
          npm install
        if: ${{ matrix.stacks.delete_full_stack == true }}
      - name: Setup Python
        uses: actions/setup-python@v3        
        with:
          python-version: '3.9'
        if: ${{ matrix.stacks.delete_full_stack == true }}
      - name: Remove Full Stack
        if: ${{ matrix.stacks.delete_full_stack == true }}        
        run: |
          echo ${{ github.event.before }}
          echo $GITHUB_SHA
          git checkout ${{ github.event.before }}
          pwd
          ls -la
          STAGE="${{ needs.get-stage-and-region.outputs.stage }}"
          REGION="${{ needs.get-stage-and-region.outputs.region }}"
          echo "$STAGE"
          echo "$REGION"
          echo ${{ matrix.stacks.stack_name }}
          cd ${{ matrix.stacks.stack_name }}
          npx serverless remove --stage $STAGE
          # npx serverless remove ${{ matrix.stacks.stack_name }} --stage $STAGE
  
  delete-lambda-service:
    name: Delete Lambda Service
    needs: [delete-stack, track-deleted-files, get-stage-and-region]
    if: ${{ needs.track-deleted-files.outputs.lambdas-to-remove != '[]' && needs.track-deleted-files.outputs.lambdas-to-remove != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lambdas:
          - ${{fromJson(needs.track-deleted-files.outputs.lambdas-to-remove)}}
    steps:
      - uses: actions/checkout@v2
        if: ${{ matrix.lambdas.delete_full_lambda == true }}
      - name: Fetch Event Before
        if: ${{ matrix.lambdas.delete_full_lambda == true }}        
        run: |
          git fetch origin ${{ github.event.before }} --depth=1          
      - name: Cache node_modules
        if: ${{ matrix.lambdas.delete_full_lambda == true }}
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-
      - name: Configure AWS Credentials
        if: ${{ matrix.lambdas.delete_full_lambda == true }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Install Dependencies
        run: npm install
        if: ${{ matrix.lambdas.delete_full_lambda == true }}
      - name: Setup Python
        uses: actions/setup-python@v3        
        with:
          python-version: '3.9'
        if: ${{ matrix.lambdas.delete_full_lambda == true }}
      - name: Remove Lambda
        if: ${{ matrix.lambdas.delete_full_lambda == true }}        
        run: |
          STAGE="${{ needs.get-stage-and-region.outputs.stage }}"
          REGION="${{ needs.get-stage-and-region.outputs.region }}"
          echo "$STAGE"
          echo "$REGION"
          echo ${{ matrix.lambdas.lambda_name }}
          
          cd ${{ matrix.lambdas.stack_name }}          
          npx serverless deploy --stage $STAGE
          # npx serverless ${{ matrix.lambdas.lambda_name }}:remove --stage $STAGE
          # npx serverless remove ${{ matrix.stacks.stack_name }} --stage $STAGE

  # get-stage-and-region:
  #   name: Get Stage And Region by Branch
  #   runs-on: ubuntu-latest
  #   outputs:
  #     region: ${{ steps.stage-and-region.outputs.region }}
  #     stage: ${{ steps.stage-and-region.outputs.stage }}
  #   steps:
  #     - name: Get Current Branch
  #       shell: bash
  #       run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
  #       id: extract_current_branch

  #     - name: Set Region For Dev
  #       run: |
  #         echo "STAGE=dev" >> $GITHUB_ENV
  #         echo "REGION=$DEV_REGION" >> $GITHUB_ENV
  #       if: ${{ steps.extract_current_branch.outputs.branch == 'dev' }}

  #     - name: Set Region For Crafting
  #       run: |
  #         echo "STAGE=dev" >> $GITHUB_ENV
  #         echo "REGION=$DEV_REGION" >> $GITHUB_ENV
  #       if: ${{ steps.extract_current_branch.outputs.branch == 'crafting' }}

  #     - name: Set Region For Release
  #       run: |
  #         eecho "STAGE=release" >> $GITHUB_ENV
  #         echo "REGION=$RELEASE_REGION" >> $GITHUB_ENV
  #       if: ${{ steps.extract_current_branch.outputs.branch == 'release' }}

  #     - name: Set Region For Production
  #       run: |
  #         echo "STAGE=prod" >> $GITHUB_ENV
  #         echo "REGION=$PROD_REGION" >> $GITHUB_ENV
  #       if: ${{ steps.extract_current_branch.outputs.branch == 'main' }}

  #     - name: Get Stage And Region
  #       id: stage-and-region
  #       run: |
  #         STAGE="${{ env.STAGE }}"
  #         REGION="${{ env.REGION }}"
  #         echo "::set-output name=stage::$( echo "$STAGE" )"
  #         echo "::set-output name=region::$( echo "$REGION" )"

  # track-deleted-files:
  #   name: Changes
  #   runs-on: ubuntu-latest    
  #   outputs:
  #     stacks_to_remove: ${{ steps.set-matrix.outputs.stacks_to_remove }}
  #     # lambdas_to_remove: ${{ steps.diff.outputs.lambdas_to_remove }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Check changed files
  #       id: diff
  #       run: |
  #         git fetch origin ${{ github.event.before }} --depth=1
  #         export DIFF=$( git diff --diff-filter=D --name-only ${{ github.event.before }} $GITHUB_SHA )
  #         echo "Diff between ${{ github.event.before }} and $GITHUB_SHA"
  #         echo "$DIFF"
          
  #         echo "::set-output name=diff::$( echo "$DIFF" | sed ':a;N;$!ba;s/\n/%0A/g' )"          
  #     - name: Set matrix for delete stacks
  #       id: set-matrix
  #       run: |
  #         DIFF="${{ steps.diff.outputs.diff }}"
  #         STACKS="${{ needs.stacks.outputs.listStacks }}"
  #         STAGE="${{ needs.get-stage-and-region.outputs.stage }}"
  #         REGION="${{ needs.get-stage-and-region.outputs.region }}"
                    
  #         COUNT_DELETED_FILES_IN_STACK=0
  #         COUNT_DELETED_FILES_IN_SERVICE=0          
          
  #         # Genera el archivo inicial que contendra la cantidad de archivos
  #         # eliminados por stack y servicios lambda.
  #         jq -n '[]' > initial_json.json
  #         json_file=$(jq . initial_json.json)
  #         INITIAL_DIRECTORY=$(pwd)
         
  #         if [ -z "$DIFF" ]; then
  #           echo "::set-output name=folders::[]"
  #         else
  #           JSON="["
  #           json_stack="["            
  #           while read path; do
  #             # Set $stack to substring before /
  #             delete_full_stack=false
  #             stack="$( echo $path | cut -d'/' -f1 -s )"
  #             lambda="$( echo $path | cut -d'/' -f3 -s )"
              
  #             git checkout ${{ github.event.before }}
  #             cd "$stack"
  #             initial_files_in_stack=$(git ls-files | wc -l)
  #             cd $INITIAL_DIRECTORY
  #             if [[ "$lambda" ]]; then
  #               cd "$stack/services/$lambda"
  #               initial_files_in_lambda_service=$(git ls-files | wc -l)
  #             fi
  #             cd $INITIAL_DIRECTORY

  #             DATA_STACK=$(echo "$json_file" | jq -c '.[] | select(.stack_name == "'$stack'")')
  #             DATA_LAMBDA=$( echo "$DATA_STACK" | jq -r '.lambdas[] | select(.lambda_name == "'$lambda'")' )

              
  #             # Se encarga de armar objeto json con todos los archivos eliminados en un stack
  #             if [[ "$DATA_STACK" ]]; then
  #                 COUNT_DELETED_FILES_STACK=$( echo "$DATA_STACK" | jq -r '.files_deleted_in_stack' )
  #                 COUNT_DELETED_FILES_STACK=$((COUNT_DELETED_FILES_STACK + 1))
  #                 if [[ "$COUNT_DELETED_FILES_STACK" == "$initial_files_in_stack" ]]; then
  #                     delete_full_stack=true
  #                     jq '(.[] | select(.stack_name == "'$stack'")).delete_full_stack = true' initial_json.json > tmp_json.json
  #                     json_file=$(jq . tmp_json.json)
  #                     echo "$json_file" > initial_json.json
  #                 fi
  #                 jq --arg new_key "$COUNT_DELETED_FILES_STACK" '(.[] | select(.stack_name == "'$stack'")).files_deleted_in_stack |= $new_key' initial_json.json > tmp_json.json
  #                 json_file=$(jq . tmp_json.json)
  #                 echo "$json_file" > initial_json.json
  #             else
  #                 jq '.[. | length] |= . + {"stack_name": "'$stack'", "files_deleted_in_stack": "1", "initial_files_in_stack": '$initial_files_in_stack', "delete_full_stack": false, "lambdas": []}' initial_json.json > tmp_json.json
  #                 json_file=$(jq . tmp_json.json)
  #                 echo "$json_file" > initial_json.json
  #             fi


              
  #             # Se encarga de armar un objeto json con todos los archivos eliminados en un 
  #             # service lambda.
  #             if [[ "$DATA_LAMBDA" ]]; then
  #                 COUNT_DELETED_FILES_LAMBDA=$( echo "$DATA_LAMBDA" | jq -r '.files_deleted' )
  #                 COUNT_DELETED_FILES_LAMBDA=$((COUNT_DELETED_FILES_LAMBDA + 1))
                  
  #                 arr_lambdas=$(jq '(.[] | select(.stack_name == "'$stack'")).lambdas' initial_json.json)                  

  #                 values_lambda=$(jq -c --arg new_key "$COUNT_DELETED_FILES_LAMBDA" '(.[] | select(.stack_name == "'$stack'")).lambdas[] | select(.lambda_name == "'$lambda'").files_deleted |= $new_key' initial_json.json)
  #                 arr_lambdas="["
  #                 while read lambda_; do
  #                     if [[ ($COUNT_DELETED_FILES_LAMBDA == $initial_files_in_lambda_service) && ($delete_full_stack == false) ]]; then
  #                         lambda_=$( echo "$lambda_" | jq -c 'select(.lambda_name == "'$lambda'").delete_full_lambda=true' )
  #                     fi
  #                     arr_lambdas="$arr_lambdas$lambda_,"
  #                 done <<< "$values_lambda"
                  
  #                 if [[ $arr_lambdas == *, ]]; then
  #                     arr_lambdas="${arr_lambdas::-1}"
  #                 fi
  #                 arr_lambdas="$arr_lambdas]"
  #                 jq --argjson new_key $arr_lambdas '(.[] | select(.stack_name == "'$stack'")).lambdas |= $new_key' initial_json.json > tmp_json.json
  #                 json_file=$(jq . tmp_json.json)
  #                 echo "$json_file" > initial_json.json

  #             elif [[ "$lambda" ]]; then
  #                 arr_lambdas='[{"lambda_name":"'$lambda'","files_deleted":"1","delete_full_lambda":false,"initial_files_in_lambda_service":'$initial_files_in_lambda_service',"stack_name":"'$stack'"}'
  #                 values_lambda=$(jq -c '(.[] | select(.stack_name == "'$stack'")).lambdas[]' initial_json.json)        
  #                 while read lambda; do
  #                     arr_lambdas="$arr_lambdas,$lambda"
  #                 done <<< "$values_lambda"

  #                 if [[ $arr_lambdas == *, ]]; then        
  #                     arr_lambdas=$( echo "${arr_lambdas::-1}" )
  #                 fi
  #                 arr_lambdas="$arr_lambdas]"
  #                 jq --argjson new_key $arr_lambdas '(.[] | select(.stack_name == "'$stack'")).lambdas |= $new_key' initial_json.json > tmp_json.json
  #                 json_file=$(jq -c . tmp_json.json)    
  #                 echo "$json_file" > initial_json.json
  #             fi

  #           done <<< "$DIFF"

  #           arr_stored_lambdas="["
  #           stored_lambda_values=$(jq -c '(.[] | select(.delete_full_stack == false)).lambdas[] | select(.delete_full_lambda == true)' initial_json.json)
  #           while read stored_lambda; do    
  #               arr_stored_lambdas="$arr_stored_lambdas$stored_lambda,"
  #           done <<< "$stored_lambda_values"
  #           if [[ $arr_stored_lambdas == *, ]]; then        
  #               arr_stored_lambdas=$( echo "${arr_stored_lambdas::-1}" )
  #           fi
  #           arr_stored_lambdas="$arr_stored_lambdas]"
            
  #           # echo $(jq . initial_json.json)  | jq
  #           # echo "$arr_stored_lambdas"
            
  #           # json_file=$(jq . initial_json.json)
  #           # echo "$json_file"
  #           # echo "::set-output name=stacks_to_remove::[{\"go\":\"1.13\",\"commit\":\"v1.0.0\"},{\"go\":\"1.14\",\"commit\":\"v1.2.0\"}]"
  #           # echo "::set-output name=lambdas_to_remove::$( echo "$arr_stored_lambdas" )"
            
  #         fi
  #         json_file=$(jq -c . initial_json.json)
  #         echo "::set-output name=stacks_to_remove::$( echo "$json_file" )"          



  # stacks_to_remove:
  #   needs: [track-deleted-files, get-stage-and-region]
  #   name: Stacks To Remove
  #   # if: ${{ needs.track-deleted-files.outputs.stacks_to_remove != '[]' && needs.track-deleted-files.outputs.stacks_to_remove != '' }}
  #   strategy:
  #     matrix:
  #       stack: ${{fromJson(needs.track-deleted.outputs.stacks_to_remove)}}
  #   steps:
  #   - run: |
  #       echo ${{ matrix }}
  #   runs-on: ubuntu-latest
  #   # steps:
  #   #   - uses: actions/checkout@v2
  #   #   - name: Cache node_modules
  #   #     if: ${{ matrix.stacks_to_remove.delete_full_stack == true }}
  #   #     uses: actions/cache@v1
  #   #     with:
  #   #       path: ~/.npm
  #   #       key: node-${{ hashFiles('**/package-lock.json') }}
  #   #       restore-keys: |
  #   #         node-
  #   #   - name: Configure AWS Credentials
  #   #     # if: ${{ matrix.stacks_to_remove.delete_full_stack == true }}
  #   #     uses: aws-actions/configure-aws-credentials@v1
  #   #     with:
  #   #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #   #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #   #       aws-region: ${{ secrets.AWS_REGION }}
      
  #   #   - name: Remove All Stack
  #   #     working-directory: ${{ matrix.stacks_to_remove.stack_name }}
  #   #     run: |
  #   #       echo "${{ needs.track-deleted.outputs.stacks_to_remove }}"
  #   #     # if: ${{ matrix.stacks_to_remove.delete_full_stack == true }}
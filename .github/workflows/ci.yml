name: Test CI
on:
  pull_request:
    branches-ignore:
      - '**'
    # branches:
    #  - 'dev'
    #  - 'release'
    #  - 'main'
    #  - 'crafting'

env:
  DEV_REGION: sa-east-1  
  RELEASE_REGION: us-east-1
  PROD_REGION: us-east-1

jobs:
  get-stage-and-region:
    name: Get Stage And Region by Branch
    runs-on: ubuntu-latest
    outputs:
      region: ${{ steps.stage-and-region.outputs.region }}
      stage: ${{ steps.stage-and-region.outputs.stage }}
    steps:
      - name: Get Current Branch
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_current_branch

      - name: Set Region For Dev
        run: |
          echo "STAGE=dev" >> $GITHUB_ENV
          echo "REGION=$DEV_REGION" >> $GITHUB_ENV
        if: ${{ steps.extract_current_branch.outputs.branch == 'dev' }}

      - name: Set Region For Crafting
        run: |
          echo "STAGE=dev" >> $GITHUB_ENV
          echo "REGION=$DEV_REGION" >> $GITHUB_ENV
        if: ${{ steps.extract_current_branch.outputs.branch == 'crafting' }}

      - name: Set Region For Release
        run: |
          echo "STAGE=release" >> $GITHUB_ENV
          echo "REGION=$RELEASE_REGION" >> $GITHUB_ENV
        if: ${{ steps.extract_current_branch.outputs.branch == 'release' }}

      - name: Set Region For Production
        run: |
          echo "STAGE=prod" >> $GITHUB_ENV
          echo "REGION=$PROD_REGION" >> $GITHUB_ENV
        if: ${{ steps.extract_current_branch.outputs.branch == 'main' }}

      - name: Get Stage And Region
        id: stage-and-region
        run: |
          STAGE="${{ env.STAGE }}"
          REGION="${{ env.REGION }}"
          if [ -z "$STAGE" ]; then
            STAGE="dev"
          fi
          if [ -z "$REGION" ]; then
            REGION="$DEV_REGION"
          fi
          echo "::set-output name=stage::$( echo "$STAGE" )"
          echo "::set-output name=region::$( echo "$REGION" )"
  changes:
    name: Changes
    runs-on: ubuntu-latest
    outputs:
      stack: ${{ steps.filter.outputs.stack }}
    steps:
      - uses: actions/checkout@v2
      - name: Check changed files
        id: diff
        run: |
          if [ $GITHUB_BASE_REF ]; then
            # Pull Request
            git fetch origin $GITHUB_BASE_REF --depth=1
            export DIFF=$( git diff --diff-filter=d --name-only origin/$GITHUB_BASE_REF $GITHUB_SHA )
            echo "Diff between origin/$GITHUB_BASE_REF and $GITHUB_SHA"
          else
            # Push
            git fetch origin ${{ github.event.before }} --depth=1
            export DIFF=$( git diff --diff-filter=d --name-only ${{ github.event.before }} $GITHUB_SHA )
            echo "Diff between ${{ github.event.before }} and $GITHUB_SHA"
          fi
          echo "$DIFF"
          # Escape newlines (replace \n with %0A)
          echo "::set-output name=diff::$( echo "$DIFF" | sed ':a;N;$!ba;s/\n/%0A/g' )"
      - name: Set matrix for build
        id: filter
        run: |
          DIFF="${{ steps.diff.outputs.diff }}"
          echo "$DIFF"

          if [ -z "$DIFF" ]; then
            echo "::set-output name=folders::[]"
          else
            JSON="["
            json_stack="["            
            while read path; do              
              lambda=""
              stack="$( echo $path | cut -d'/' -f1 -s )"
              services_path="$( echo $path | cut -d'/' -f2 -s )"
            if [[ "$services_path" == *"services"* ]]; then
              lambda="$( echo $path | cut -d'/' -f3 -s )"
            fi

            if [[ "$stack" != ".github" && "$lambda" != "" ]]; then             

              stack_item="{\"stack_name\":\"$stack\",\"lambda\":\"$lambda\"},"

              if [[ "$json_stack" != *"$stack_item"* ]]; then
                json_stack="$json_stack$stack_item"
              fi

            fi
            done <<< "$DIFF"

            if [[ $json_stack == *, ]]; then
              json_stack="${json_stack%?}"
            fi
            json_stack="$json_stack]"
            echo $json_stack

            echo "::set-output name=stack::$( echo "$json_stack" )"
          fi

  tests:
    needs: [changes, get-stage-and-region]
    name: Tests
    if: ${{ needs.changes.outputs.stack != '[]' && needs.changes.outputs.stack != '' }}
    strategy:
      matrix:
        stack: ${{ fromJSON(needs.changes.outputs.stack) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.get-stage-and-region.outputs.region }}
      - name: Setup Python
        uses: actions/setup-python@v3        
        with:
          python-version: '3.9'
      
      - name: Comprobe Tests Files
        working-directory: ${{ matrix.stack.stack_name }}
        id: comprobe_tests_files
        run: |
          DIR="services/${{ matrix.stack.lambda }}/tests/"
          if [ -d "$DIR" ]
          then
              if [ ! "$(ls -A $DIR)" ]; then
                  echo "$DIR tests is Empty"
                  exit 1
              elif ! compgen -G "${DIR}/*_test.py" > /dev/null; then
                  echo "In $DIR directory does not have test files."
                  exit 1
              fi
          else
              echo "Directory $DIR not found."
          fi

      - name: Test Function
        working-directory: ${{ matrix.stack.stack_name }}
        id: run_tests
        run: |
          echo "::set-output name=mix-test::$( echo "lambda *${{ matrix.stack.lambda }}* del stack *${{ matrix.stack.stack_name }}*" )"
          make create_venv LAMBDA=${{ matrix.stack.lambda }}
          make install_requirements LAMBDA=${{ matrix.stack.lambda }}
          make install_remote_layers LAMBDA=${{ matrix.stack.lambda }} STAGE=${{ needs.get-stage-and-region.outputs.stage }}
          make run_tests LAMBDA=${{ matrix.stack.lambda }}
          make clean_env LAMBDA=${{ matrix.stack.lambda }}

      - name: Send Success Deploy Slack Message
        continue-on-error: true
        if: ${{ job.status == 'success' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Resultado Test
          SLACK_MESSAGE: Pruebas exitosas para ${{steps.run_tests.outputs.mix-test}}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_FOOTER: 'Tech'
      
      - name: Send Error Deploy Slack Message
        continue-on-error: true
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Resultado
          SLACK_MESSAGE: Fallaron las pruebas para ${{steps.run_tests.outputs.mix-test}}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_FOOTER: 'Tech'

  # get-pr-link:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     link: ${{ steps.get-link-pr.outputs.link }}      
  #   steps:
  #     - name: test PR
  #       id: get-link-pr
  #       run: |
  #         LINK="https://github.com/${GITHUB_REPOSITORY}/pull/${{ github.event.number }}"
  #         echo "::set-output name=link::$( echo "$LINK" )"          
  # send-slack-message:
  #   runs-on: ubuntu-latest
  #   needs: ["get-pr-link"]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: send a slack message
  #       uses: ./.github/actions/slack
  #       with:
  #         slack_webhook: ${{ secrets.SLACK_WEBHOOK }}
  #         title: ":pr: Creaci√≥n de PR para CR"
  #         message: "Se ha creado el <${{ needs.get-pr-link.outputs.link }}|siguiente> PR"
  # run-unit-tests:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@v1
  #    - name: Test file
  #      run: |
  #         python stack_project_1/services/project_1/lambda_1/test_name_function.py
  

    